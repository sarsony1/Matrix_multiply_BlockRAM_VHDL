--------------------------- VERILOG EPP FIFO EXAMPLE ---------------------------

INTRODUCTION

The ex_fifo example implements the CommFPGA module's channel interface using a
pair of FIFOs. It demonstrates throttling of the data flow to and from the host.


BUILDING FROM SOURCE

You can just run "make PLATFORM=<your platform>" to build. You can see the
supported platforms in ../../platforms/. If yours is not listed, ask about it on
the mailing list.


GENERATING THE FIFO CORE

Unfortunately Xilinx's tools are a bit brain-dead and don't let you script the
generation of a FIFO core in manner that is independent of ISE version. As is,
the Makefile assumes you have ISE 13.1. If you have a different ISE version you
will probably have to generate the FIFO core manually:

    mkdir fifo
    cd fifo
    coregen

When coregen starts, follow these steps:
    * Select "File -> New Project".
    * Save "coregen.cgp".
    * In "Project Options":
      * In "Part": Choose your FPGA family, product, package etc.
      * In "Generation": Choose "Design Entry=Verilog".
      * Click "OK".
    * Double-click "Memories & Storage Elements -> FIFOs -> Fifo Generator".
    * In "Fifo Generator":
      * Choose "fifo" for "Component Name" & click "Next" twice.
      * Choose "First-Word Fall-Through", "Width=8", "Depth=128" & "Next" twice.
      * Uncheck "Reset Pin" & "Next".
      * Check "Data Count" (width should already be 8) & "Next" twice.
      * Click "Generate".
    * Exit coregen when generation is complete.

Now copy the generated Verilog stub and NGC file to the project directory:

    cp fifo.ngc ..
    cp fifo.v ../fifo.v
    cd ..

Now edit the Makefile, putting a "#" in front of the EXTRAS line, and removing
the path components on the line with "fifo.v" so the line just reads
"<TAB>fifo.v \".


DETAILED DESCRIPTION

Writes to channel 0 insert data into the write FIFO. The write FIFO is drained
continuously by a variable-rate process which displays each byte on the eight
LEDs on your FPGA board. You can choose one of 16 drain speeds by setting a
4-bit number on SW[7:4]. You can see the current write FIFO depth by looking at
the first pair of digits on the 7-seg display, or by reading channel 2.

Reads from channel 0 take data from the read FIFO. The read FIFO is continuously
filled by a variable-rate counter process. You can choose one of 16 fill speeds
by setting a 4-bit number on SW[3:0]. You can see the current read FIFO depth by
looking at the second pair of digits on the 7-seg display, or by reading channel
1.

When first loaded, you will see the read FIFO gradually filling up until it runs
out of space in the FIFO (there's room for 0x82 bytes). You can drain the read
FIFO by reading channel 0, for example 0x80 times. If 0x80 items are not ready
yet, the read will block until they are ready:

> r0 80
         00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F
00000000 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F ................
00000010 10 11 12 13 14 15 16 17 18 19 1A 1B 1C 1D 1E 1F ................
00000020 20 21 22 23 24 25 26 27 28 29 2A 2B 2C 2D 2E 2F  !"#$%&'()*+,-./
00000030 30 31 32 33 34 35 36 37 38 39 3A 3B 3C 3D 3E 3F 0123456789:;<=>?
00000040 40 41 42 43 44 45 46 47 48 49 4A 4B 4C 4D 4E 4F @ABCDEFGHIJKLMNO
00000050 50 51 52 53 54 55 56 57 58 59 5A 5B 5C 5D 5E 5F PQRSTUVWXYZ[\]^_
00000060 60 61 62 63 64 65 66 67 68 69 6A 6B 6C 6D 6E 6F `abcdefghijklmno
00000070 70 71 72 73 74 75 76 77 78 79 7A 7B 7C 7D 7E 7F pqrstuvwxyz{|}~.

Notice the values read are incrementing, because the process filling the read
FIFO is just a counter. Also note the the counter will continue counting even if
the read FIFO fills up, causing data to be lost. So long as you drain the read
FIFO regularly, the counter values you get back will be continuous. But if you
let the read FIFO fill up, you will see discontinuities in the data you read.

You can easily see the write FIFO in action by sending bit-pattern animations to
it. When I was a kid I was fascinated by KITT's back-and-forth scanner LEDs.
Well, now you can have your own:

> w0 010204081020408040201008040201020408102040804020100804020100

The data is written to the write FIFO too quickly for you to see, but the
process which drains the write FIFO and displays each byte on the LEDs runs slow
enough for you to see the LED animation.
